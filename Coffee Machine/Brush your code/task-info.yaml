type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.v6.stage.BaseStageTest;
    import org.hyperskill.hstest.v6.testcase.CheckResult;
    import org.hyperskill.hstest.v6.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends BaseStageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.FALSE;
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: src/machine/Latte.java
  visible: true
  text: |
    package machine;

    public class Latte {

        int water;
        int milk;
        int coffeeBeans;
        int cups;
        int price;
        int[] latte;

        public Latte() {
            this.water = 350;
            this.milk = 75;
            this.coffeeBeans = 20;
            this.cups = 1;
            this.price = 7;
            this.latte = new int[] {water, milk, coffeeBeans, cups, price};
        }

        public int checkWater(int availableW) {
            int waterForCups;
            if (availableW/this.water > 0) {
                waterForCups = availableW/this.water;
            } else {
                waterForCups = 0;
                System.out.println("Sorry, not enough water!");
            }
            return waterForCups;
        }

        public int checkMilk(int availableM) {
            int milkForCups;
            if (availableM / this.milk > 0) {
                milkForCups = availableM / this.water;
            } else {
                milkForCups = 0;
                System.out.println("Sorry, not enough milk!");
            }
            return milkForCups;
        }

        public int checkCoffee(int availableC) {
            int coffeeForCups;
            if (availableC / this.coffeeBeans > 0) {
                coffeeForCups = availableC / this.coffeeBeans;
            } else {
                coffeeForCups = 0;
                System.out.println("Sorry, not enough coffee beans!");
            }
            return coffeeForCups;
        }

        public int checkCups(int availableCups) {
            int cups;
            if (availableCups / this.cups > 0) {
                cups = availableCups / this.cups;
            } else {
                cups = 0;
                System.out.println("Sorry, not enough cups!");
            }
            return cups;
        }

        public int useWater (int availableW) {
            return availableW - this.water;
        }
        public int useMilk (int availableM) {
            return availableM - this.milk;
        }
        public int useCoffee (int availableC) {
            return availableC - this.coffeeBeans;
        }
        public int useCups (int availableCups) {
            return availableCups - this.cups;
        }
        public int useMoney (int stock) {
            return stock + this.price;
        }

        public int[] after (int availableW, int availableM, int availableC, int availableCups, int stock) {
            return new int[] {useWater(availableW), useMilk(availableM), useCoffee(availableC), useCups(availableCups), useMoney(stock)};
        }
    }
  learner_created: true
- name: src/machine/OneCup.java
  visible: true
  text: |
    package machine;

    public class OneCup {
       public int necWater;
       public int necMilk;
       public int necCoffee;

       public OneCup () {
           necWater = 200;
           necMilk = 50;
           necCoffee = 15;
        }

    //    public int getNecWater() {
    //        return necWater;
    //    }
    //
    //    public int getNecMilk() {
    //        return necMilk;
    //    }
    //
    //    public int getNecCoffee() {
    //        return necCoffee;
    //    }
    }
  learner_created: true
- name: src/machine/Espresso.java
  visible: true
  text: |
    package machine;

    public class Espresso {

        int water;
        int milk;
        int coffeeBeans;
        int price;
        int cups;
        int[] espresso;

        public Espresso() {
            this.water = 250;
            this.milk = 0;
            this.coffeeBeans = 16;
            this.price = 4;
            this.cups = 1;
            this.espresso = new int[]{water, milk, coffeeBeans, cups, price};
        }

        public int checkWater(int availableW) {
            int waterForCups;
            if (availableW/this.water > 0) {
                waterForCups = availableW/this.water;
            } else {
                waterForCups = 0;
                System.out.println("Sorry, not enough water!");
            }
            return waterForCups;
        }

        public int checkCoffee(int availableC) {
            int coffeeForCups;
            if (availableC / this.coffeeBeans > 0) {
                coffeeForCups = availableC / this.coffeeBeans;
            } else {
                coffeeForCups = 0;
                System.out.println("Sorry, not enough coffee beans!");
            }
            return coffeeForCups;
        }

        public int checkCups(int availableCups) {
            int cups;
            if (availableCups / this.cups > 0) {
                cups = availableCups / this.cups;
            } else {
                cups = 0;
                System.out.println("Sorry, not enough cups!");
            }
            return cups;
        }

        public int useWater (int availableW) {
            return availableW - water;
        }
        public int useCoffee (int availableC) {
            return availableC - coffeeBeans;
        }
        public int useCups (int availableCups) {
            return availableCups - cups;
        }
        public int useMoney (int stock) {
            return stock + price;
        }

        public int[] after (int availableW, int milk, int availableC, int availableCups, int stock) {
            return new int[]{useWater(availableW), milk, useCoffee(availableC), useCups(availableCups), useMoney(stock)};
        }
    }
  learner_created: true
- name: src/machine/Cappuccino.java
  visible: true
  text: |
    package machine;

    public class Cappuccino {

        int water;
        int milk;
        int coffeeBeans;
        int cups;
        int price;
        int[] cappuccino;

        public Cappuccino() {
            this.water = 200;
            this.milk = 100;
            this.coffeeBeans = 12;
            this.cups = 1;
            this.price = 6;
            this.cappuccino = new int[] {water, milk, coffeeBeans, cups, price};
        }

        public int checkWater(int availableW) {
            int waterForCups;
            if (availableW/this.water > 0) {
                waterForCups = availableW/this.water;
            } else {
                waterForCups = 0;
                System.out.println("Sorry, not enough water!");
            }
            return waterForCups;
        }

        public int checkMilk(int availableM) {
            int milkForCups;
            if (availableM / this.milk > 0) {
                milkForCups = availableM / this.water;
            } else {
                milkForCups = 0;
                System.out.println("Sorry, not enough milk!");
            }
            return milkForCups;
        }

        public int checkCoffee(int availableC) {
            int coffeeForCups;
            if (availableC / this.coffeeBeans > 0) {
                coffeeForCups = availableC / this.coffeeBeans;
            } else {
                coffeeForCups = 0;
                System.out.println("Sorry, not enough coffee beans!");
            }
            return coffeeForCups;
        }

        public int checkCups(int availableCups) {
            int cups;
            if (availableCups / this.cups > 0) {
                cups = availableCups / this.cups;
            } else {
                cups = 0;
                System.out.println("Sorry, not enough cups!");
            }
            return cups;
        }

        public int useWater (int availableW) {
            return availableW - this.water;
        }
        public int useMilk (int availableM) {
            return availableM - this.milk;
        }
        public int useCoffee (int availableC) {
            return availableC - this.coffeeBeans;
        }
        public int useCups (int availableCups) {
            return availableCups - this.cups;
        }
        public int useMoney (int stock) {
            return stock + this.price;
        }

        public int[] after (int availableW, int availableM, int availableC, int availableCups, int stock) {
            return new int[] {useWater(availableW), useMilk(availableM), useCoffee(availableC), useCups(availableCups), useMoney(stock)};
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement
status: Solved
record: -1
